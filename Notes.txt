** backend del calendarApp **

en CMD "terminal"
  - ingresar a la carpeta  10-calendar_backend
  - instalar las configuracion del package.json con: npm init -y
      este es el punto de entrada de cualquier aplicacion de NODE. ayuda a identificar mi paquete si se llega a desplegaar en el paquete mundial de npm. me ayuda a identificar mis dependencias y las de desarrollo.

  para ejecutar el proyecto
    se crea un archivo, y en el CMD "la terminal"..
    - node nombre_del_archivo.js 
  de esta manera me muestra en consola la infomacion del archivo solicitada
  - cada vez que quiera ejecutar cualquier cambio guardado, es necesario volver a correr el comando de ejecucion
      para evitar esto caada vez, se realiza la instalacion del siguiente paquete, al momento de desarrollar en NODE
        - NODEMON : EJECUTA EL COMANDO CADA VEZ QUE DETECTE CAMBIOS
          npm i nodemon -g (-g=instalacion global)
  para ejecutar en terminal:  nodemon nombre_del_archivo.jxxxx  (nodemon index.js)

en el package.json
  - creacion de dos dcripts
    1. "dev": "nodemon index.js", //npm run dev, Modo DESARROLLO.  comando a ejecutar en caso de instlar el nodemon en node para el back,  dev , script inventado "asi funciona node" 
    2. "start": "node index.js" //npm start, para levantar el proyecto en modo produccion, va a ejecutar con npm start

luego..  **EXPRESS**
  instalacion de express en CMD
    npm i express  (no esta el -g por que se quiere el el proyecto )

  configuracion basica de express
    1. En un archivo index.js >
        const express = require('express'); // es como un import pero en NODE
    2. crear la aplicacion de EXPRESS "el servidor"
        const app = express();
    3. Escuchar las peticiones
        app.listen(5174, () => {  console.log(`Servidor corriendo en puerto ${5174} `) })
    
    el primer arg es el puerto donde quiero que corra 5174, el segundo arg es un callback,"fn de flecha" este se va a ejecutar cuando el servidor de express este corriendo "arriba"
    *NODE* acepta casi cualqioer cosa actual de js. aca se usan template string `` los backtics

asi ya se monta el backend server !! -- validar con postman

  postman:
    - solicitandole en el GET localhost:5174 (el puerto esogido), me va a mostrar un error ya que no encuentra la direccion del / . muestra en pantalla cannot GET/

configurar la primera ruta:
  en index.js:
    - app
  ______________________________________________

  midleware en express: es una funcion que se ejecuta en el momento en que alguien hace una peticion a mi servidor (es una fn que se ejecuta csiempre  que pasa por algun lugar)

  TODO EL PRODUCTO FINAL: de la aplicacion de React, se va a montar en la caprteta public.

  nodemon 'NODEMON'

 establecerla al ambienet de NODE
  - instalar: npm install dotenv
________________________________________________--

enpoint: las peticiones que vamos a habilitar para uqe los ususarios puedan acceder a ella (RUTAS)
      todo lo relacionado con auntenticacion va a estar en '/api/auth'
________________________________________________________________-

  express ya trae la configuracion de toodos los endpoints que puedo solicitar "get, post,put, delete...."
  ej.
    si quiero crear un nuevo usuario debo hacer una peticion POST: por que tengo que hacer un posteo de informacion.
    Login, creacion de usuario, renovacion de token: PETICION POST.
  ______________________________________________

las exportaciones en node:  module.exports = xxxxx

__________________________________________________________-
Auth.js controllers : la parte del 
req = "request" es lo que la persona solicita
res = "response" es lo que nosotros respondemos 
______________________________________________

CL378 npm express-validator: 
  Es un paquete de express que me ayuda a realizar validaciones de informacion que estoy recibiendo.  npm install express-validator
    https://express-validator.github.io/docs/  

    para implementaar varios midlewaeres: [] representa una coleccion de midlewares, un midelware no es mas que una funcion que se ejecuta antes que cualquier otra cosa
      check(): es el midleware de express validator encargado de validar un campo en particular, lo hace uno a la vez 
        check('lo que quiero validar', 'el mensaje de error' ).not().isEmpty() "que no este vacio"

      validationResult : manejo de errores, me muestra el error en la consola

CL 379 CUSTOM middleware
  se crea carpeta en raiz del proyecto  
    - paraa optimizar el codigo y que este encargado de valida campos.
       validar-campos.js
    - middleware: es casi ifgual a un controlador como los de controllers/auth.js
      pero_ tiene una fn adicional (next) es un callback
______________________________________________

DB CONFIGURATION - MONGO
  https://www.mongodb.com/es/cloud/atlas/efficiency
  https://mongoosejs.com/

  - Mongo atlas-es el servicio de MONGO DB en la nube
    mongo es una base de datos diferente a MySql, ORACLE.. si son bases de datos, pero como la informacion es grabada aca, Mongo atlas, es como si fuera un objeto de JS

  MONGOOSE: Es un ODM (object Data Manager) = significa que aunque en la base de datos tenemos documentos, estos se representan como objetos cuando usamos Mongoose. La parte de mapper hace referencia a como un documento es representado por un objeto, y otro documento por un objeto distinto.
    faacilita al momento de trbajar con MONGO.
      MONTAR LA DB - Conectarse a ella 


  CLUSTER: es un grupo "arreglo "de servidores donde se va a tener la infortmacion ded la base de datos
  MONGO BD COMPASS: es un programa que permite conectarse a la base de datos que esta en internet utilizando un GUI gestor una interfaz grafica de usuario GUI instalada en el pc.
  GUI: La interfaz gráfica de usuario, conocida también como GUI (graphical user interface), es un programa informático que actúa de interfaz de usuario, utilizando un conjunto de imágenes y objetos gráficos para representar la información y acciones disponibles en la interfaz.
  
  - en   https://www.mongodb.com/es/cloud/atlas/efficiency
    crear cta o ingresar con google 
      - crear base de datos 
        - config:
          gratis
          colocar nombre... siguiente 
        cerrar si pide congig de ip 
      - CONECT CON XXXXX ... mi cluster en este caso el calendarDB
          descargar Mongo compass (si es necesario )
          1. escoger version de compass
          2. Copy the connection string, then open MongoDB Compass (pegar aca)
            mongodb+srv://dennisbgaleano:<password>@calendardb.pvk5ya9.mongodb.net/
            este URL viene siendo la cadena de CONEXION (debe congigurarse.. usuario y cont)

  recargar compass: CTRL + R

  en Atlas: 
    ir a Security
      > database Access
        >  ADD NEW DATABASE USER
          - password
              > crear un usuario (mern_user)
              > generar contraseña segura (recomendada)
      >en Visual Studio:  crear file y copiar las credenciales de usuario y contraseña en vs Para recordacion   (usuarioMongoDB)

              > Built-in Role
                select > Read and write to any database
        ADD USER !  

______________________________________________

al tener conectada la DB en mongo compass, ya se puede cerrar la pg de mongo-Atlas 
  
  Configuracion de MONGOOSE: ODM va a ayudar a trabajar con la comunicacion con MONGO desde node
      https://mongoosejs.com/

    Instalar MONGOOSE - npm install mongoose
    1.  Importar 
    2.  SE HACE LA CONEXION en js 
          (database > config.js)
    3.  Se crea un modelo
          Es como una rep. visual de como seria un registro dentro de la base de datos.
            El modelo, permite hacer peticiones con una nueva instacnia, se le establecen los valores, luego se llama esa instancia.save y se graba en la base de datos.
       crear un nuevo registro,, como si fuera un objeto de JS (ej gato doc. mongoose)
      salvar 
      regresa una promesa
        finalmente tenemos en db un registro.

    - - - - - 

    Schema: Todo en Mongoose comienza con un esquema. Cada esquema se asigna a una colección de MongoDB y define la forma de los documentos dentro de esa colección.
    model: 
______________________________________________

  controllers > auth > siempre que se manejan bases de datos es importante manejarlos con TRY - CATCH


________________________________________________
bcrypt:
  paquete: npm install bcryptjs. es una función de hashing de contraseñas
  algoritmo de cifrado de contraseñas ampliamente utilizado y considerado uno de los más seguros disponibles en la actualidad. Utiliza técnicas como el "salting" y el "hashing" para proteger las contraseñas contra ataques de fuerza bruta y rainbow tables

  ¿Qué significa contraseña Hasheada?
  El hash de contraseña es una forma de cifrar las contraseñas a través de una función hash criptográfica
  se utiliza en controllers > auth, para encriptar las contraseñas y que sean mas seguras para el usuario

  salt: es un numero o informacion aleatoria uqe es utilizada para hacer encriptacion en unsa sola via
 
_________________________________________________






    


